{"version":3,"sources":["Chart.js","Form.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["theme","axis","tickColor","ticks","text","fontSize","fontFamily","fontWeight","legend","fill","Chart","props","getAllBars","bars","remainingSize","data","length","dataToFill","slice","lastBar","remainingElements","yHeight","height","yAxisDiff","y","reverse","forEach","element","push","key","repoName","id","value","size","index","indexValue","x","width","color","concat","formatSize","Math","round","Number","EPSILON","LabelText","barsAppended","labels","map","textAnchor","style","isOnSmallScreen","state","getChartMargin","top","right","bottom","left","getChartDimension","max","repos","labelPosition","updateWindowDimensions","bind","this","window","addEventListener","removeEventListener","setState","innerWidth","innerHeight","className","keys","indexBy","margin","padding","layout","layers","colors","colorBy","borderColor","from","modifiers","axisTop","enableLabel","axisLeft","tickRotation","axisBottom","tickSize","tickPadding","legendPosition","legendOffset","format","labelSkipWidth","labelSkipHeight","labelTextColor","animate","motionStiffness","motionDamping","tooltipFormat","Component","Form","handleUsernameChange","event","username","target","initPageState","responseData","fetchPage","fetchMore","invalidUser","noRepos","unknownError","success","handleSubmit","loading","sizeMessage","preventDefault","fetchRepos","then","formatResponseData","chartData","totalSize","name","repoSize","sort","a","b","renderChart","url","url_with_pagination","fetch","response","json","status","onSubmit","type","placeholder","onChange","role","Footer","href","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.88278fd9.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport { ResponsiveBar } from '@nivo/bar'\n\n// These two values must be close enough for the size label to be placed correctly\nconst defaultYAxisDiff = 64\nconst barHeight = 70\nconst smallScreenWidth = 600\nconst tickFont = \"PT Sans, serif\"\n\nconst theme = {\n    axis: {\n        tickColor: \"#eee\",\n        ticks: {\n            text: {\n                fontSize: \"1em\",\n                fontFamily: tickFont,\n                fontWeight: \"bold\"\n            }\n        },\n        legend: {\n            text: {\n                fontSize: \"1em\",\n                fontFamily: tickFont,\n                fontWeight: \"bold\",\n                fill: '#165f77'\n            }\n        }\n    }\n};\n\n\nclass Chart extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            labelPosition: null,\n            width: 0, height: 0\n        }\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    }\n\n\n    componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener('resize', this.updateWindowDimensions);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions() {\n        this.setState({ width: window.innerWidth, height: window.innerHeight });\n    }\n\n    getAllBars = (bars) => {\n        const remainingSize = this.props.data.length - bars.length\n        const dataToFill = this.props.data.slice(0, remainingSize)\n        let lastBar = bars[0]\n        let remainingElements = []\n\n        const yHeight = bars[0].height\n        const yAxisDiff = bars.length >= 2 ? bars[0].y - bars[1].y: defaultYAxisDiff\n\n        dataToFill.reverse()\n        dataToFill.forEach(element => {\n            remainingElements.push({\n                    key: element.repoName,\n                    data: {\n                        id: \"size\", value: element.size, index: 20, indexValue: element.repoName,\n                        data: {\n                            repoName: element.repoName,\n                            size: element.size\n                        }\n                    },\n                    x: 0,\n                    y: lastBar.y + yAxisDiff,\n                    width: 1,\n                    height: yHeight,\n                    color: \"#e8c1a0\"\n                }\n            )\n            lastBar = remainingElements[remainingElements.length - 1]\n        })\n        remainingElements.reverse()\n        return remainingElements.concat(bars)\n    }\n\n    formatSize = (size) => {\n        let humanReadableSize\n        if (size < 512) {\n            humanReadableSize = `${size} KiB`\n        } else if (size < 1024 * 1024) {\n            humanReadableSize = `${Math.round((size/1024 + Number.EPSILON) * 100) / 100} MiB`\n        } else {\n            humanReadableSize = `${Math.round((size/(1024*1024) + Number.EPSILON) * 100) / 100} GiB`\n        }\n        return humanReadableSize\n    }\n\n    LabelText = ({ bars }) => {\n        if (bars.length === 0) {\n            return <g></g>\n        }\n        const barsAppended = this.getAllBars(bars)\n        let labels = barsAppended.map(({ key, x, y, width, height }, index) => {\n            return (\n                <text textAnchor=\"middle\" x={width+50} y={y + height/2.1} style={{\n                    \"fontSize\": \"14px\",\n                    \"fontFamily\": \"'Slabo 27px', serif\"\n                }} key={index}>\n                    {this.formatSize(barsAppended[index].data.value)}\n                </text>\n            )\n        })\n        return <g>{labels}</g>\n    }\n\n    isOnSmallScreen = () => {\n        return this.state.width < smallScreenWidth\n    }\n\n    getChartMargin = () => {\n        const right = 120\n        const left = this.isOnSmallScreen() ? 100 : 200\n        return { top: 10, right: right, bottom: 200, left: left }\n    }\n\n    getChartDimension = () => {\n        return {\n            height: Math.max(700, this.props.repos.length * barHeight),\n            width: this.isOnSmallScreen() ? this.state.width + 200: this.state.width\n        }\n    }\n\n    render() {\n\n        return (\n            <div className=\"wrap-chart\">\n                <div style={this.getChartDimension()} className=\"bar-chart\">\n                    <ResponsiveBar\n                        data={this.props.data}\n                        keys={[\"size\"]}\n                        indexBy=\"repoName\"\n                        margin={this.getChartMargin()}\n                        padding={0.1}\n                        layout=\"horizontal\"\n                        layers={[\"grid\", \"axes\", \"bars\", this.LabelText, \"markers\", \"legends\"]}\n                        colors={{\"scheme\": \"nivo\"}}\n                        colorBy=\"index\"\n                        borderColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\n                        axisTop={null}\n                        enableLabel={false}\n                        axisLeft={{\n                            tickRotation: this.isOnSmallScreen() ? -60: 0,\n                        }}\n                        axisBottom={{\n                            tickSize: 10,\n                            tickPadding: 5,\n                            tickRotation: this.isOnSmallScreen() ? -50: 0,\n                            legend: 'MiB',\n                            legendPosition: 'middle',\n                            legendOffset: 70,\n                            format: value => Math.round((value/1024 + Number.EPSILON))\n                        }}\n                        labelSkipWidth={12}\n                        labelSkipHeight={12}\n                        labelTextColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\n                        animate={true}\n                        motionStiffness={90}\n                        motionDamping={15}\n                        theme={theme}\n                        tooltipFormat={value => value + ' KiB'}\n                        />\n                </div>\n             </div>\n        )\n    }\n}\n\nexport default Chart;\n","import React, {Component} from 'react';\nimport Chart from \"./Chart\";\n\nclass Form extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            username: \"\",\n            renderChart: true,\n            responseData: [],\n            chartData: null,\n            repos: null,\n            loading: false,\n            success:false,\n            sizeMessage:false,\n            fetchPage: 1,\n            fetchMore: true,\n            invalidUser: false,\n            noRepos: false,\n            unknownError: false,\n            totalSize: 0\n        }\n        this.initPageState()\n    }\n\n    handleUsernameChange = (event) => {\n        this.setState({\n            username: event.target.value\n        })\n    }\n\n    async fetchRepos() {\n        if (!this.fetchMore) {\n            return\n        }\n        const url = `https://api.github.com/users/${this.state.username}/repos?per_page=100`\n        const url_with_pagination = `${url}&page=${this.fetchPage}`\n        const response = await fetch(url_with_pagination)\n        const responseData = await response.json()\n\n        if (response.status === 404) {\n            this.invalidUser = true\n            return\n        }\n\n        if (response.status !== 200) {\n            this.unknownError = true\n            this.loading = false\n            this.success = false\n            return\n        }\n\n        if (responseData.length === 0) {\n            this.fetchMore = false\n            this.loading = false\n            this.success = false\n\n            if (this.responseData.length === 0) {\n                this.noRepos = true\n            }\n            return\n        }\n\n        this.responseData = this.responseData.concat(responseData)\n        this.fetchPage = this.fetchPage + 1\n        await this.fetchRepos()\n    }\n\n    initPageState = () => {\n        this.responseData = []\n        this.fetchPage = 1\n        this.fetchMore = true\n        this.invalidUser = false\n        this.noRepos = false\n        this.unknownError = false\n        this.success = false\n    }\n\n    handleSubmit = (event) => {\n        this.setState({\n            loading: true,\n            invalidUser: false,\n            noRepos: false,\n            unknownError: false,\n            sizeMessage: false\n        });\n        event.preventDefault()\n\n        this.fetchRepos().then(() => {\n            if (this.responseData.length !== 0) {\n                this.formatResponseData()\n            } else {\n                this.setState({\n                    success: false,\n                    sizeMessage: false,\n                    invalidUser: this.invalidUser,\n                    unknownError: this.unknownError,\n                    noRepos: this.noRepos\n                })\n            }\n            this.initPageState()\n            this.setState({ loading: false });\n        })\n\n    }\n\n    formatResponseData = () => {\n        let chartData = [];\n        let repos = []\n        let totalSize = 0\n        this.responseData.forEach(element => {\n            repos.push(element.name)\n            totalSize += element.size\n            let repoSize = element.size\n            chartData.push({\n                \"repoName\": element.name,\n                \"size\": repoSize,\n            })\n        });\n\n        chartData.sort(function(a, b) {\n            return a.size - b.size;\n        });\n\n        this.setState({\n            chartData: chartData,\n            repos: repos,\n            totalSize: Math.round((totalSize / (1024*1024) + Number.EPSILON) * 100) / 100,\n            success: true,\n            sizeMessage: true,\n            invalidUser: false,\n            unknownError: false,\n            noRepos: false\n        })\n    }\n\n\n    render() {\n        return (\n            <div>\n            <form onSubmit={this.handleSubmit} className=\"username-input-form\">\n                <input type=\"text\" className=\"username-input\" placeholder=\"Github Username\" value={this.state.username}\n                       onChange={this.handleUsernameChange}/>\n            </form>\n                {this.state.loading?\n                    <div className=\"spinner-border\" role=\"status\">\n                    </div> : null\n                }\n                {this.state.invalidUser?\n                    <div className=\"alert alert-warning message\" role=\"alert\">\n                        You sure that's a Github username?\n                    </div> : null\n                }\n                {this.state.noRepos?\n                    <div className=\"alert alert-warning message\" role=\"alert\">\n                        This person doesn't seems to have any repositories, what are you trying to see the space for?\n                    </div> : null\n                }\n                {this.state.unknownError?\n                    <div className=\"alert alert-danger message\" role=\"alert\">\n                        Something went wrong!\n                    </div> : null\n                }\n                {this.state.sizeMessage ?\n                    <div className=\"alert alert-info message\">Total space occupied: {this.state.totalSize} GiB</div> : null\n                }\n                {this.state.success ?\n                    <Chart data={this.state.chartData} repos={this.state.repos}/> : null\n                }\n\n            </div>\n        );\n    }\n\n}\n\nexport default Form;\n","import React, {Component} from 'react';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer>\n                <p>Source code at <a className=\"footer-text\" href=\"https://github.com/aktech/gitspace\">Github</a> • Made by <a className=\"footer-text\" href=\"https://iamit.in/\">Amit</a></p>\n            </footer>\n        )\n    }\n}\n\nexport default Footer;\n","import React, {Component} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Form from \"./Form\";\nimport Footer from \"./Footer\";\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <h1 className=\"site-title\">Gitspace</h1>\n                <h2 className=\"desc\">Know the space occupied by your public repositories.</h2>\n                <Form/>\n                <Footer/>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}